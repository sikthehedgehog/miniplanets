MAX_RAFTS:          equ 5               ; Maximum rafts allowed

;****************************************************************************
; RunRaftU
; Executes the game logic of a raft going up.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunRaftU:
    moveq   #0, d0
    moveq   #-1, d1
    lea     @TileList(pc), a1
    bra     RunRaftCommon

@TileList:
    dc.b    -$10,-$10,   -$10,$00,    -$10,$10
    dc.b    $00,-$10,    $00,$00,     $00,$10
    dc.b    TILE_RAFTU1, TILE_RAFTU2, TILE_RAFTU3
    dc.b    TILE_RAFTU1, TILE_RAFTU2, TILE_RAFTU3

;****************************************************************************
; RunRaftD
; Executes the game logic of a raft going down.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunRaftD:
    moveq   #0, d0
    moveq   #1, d1
    lea     @TileList(pc), a1
    bra     RunRaftCommon

@TileList:
    dc.b    -$10,-$10,   -$10,$00,    -$10,$10
    dc.b    $00,-$10,    $00,$00,     $00,$10
    dc.b    TILE_RAFTD1, TILE_RAFTD2, TILE_RAFTD3
    dc.b    TILE_RAFTD1, TILE_RAFTD2, TILE_RAFTD3

;****************************************************************************
; RunRaftL
; Executes the game logic of a raft going left.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunRaftL:
    moveq   #-1, d0
    moveq   #0, d1
    lea     @TileList(pc), a1
    bra     RunRaftCommon

@TileList:
    dc.b    -$10,-$10,   $00,-$10,    $10,-$10
    dc.b    -$10,$00,    $00,$00,     $10,$00
    dc.b    TILE_RAFTL1, TILE_RAFTL2, TILE_RAFTL3
    dc.b    TILE_RAFTL1, TILE_RAFTL2, TILE_RAFTL3

;****************************************************************************
; RunRaftR
; Executes the game logic of a raft going right.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunRaftR:
    moveq   #1, d0
    moveq   #0, d1
    lea     @TileList(pc), a1
    bra     RunRaftCommon

@TileList:
    dc.b    -$10,-$10,   $00,-$10,    $10,-$10
    dc.b    -$10,$00,    $00,$00,     $10,$00
    dc.b    TILE_RAFTR1, TILE_RAFTR2, TILE_RAFTR3
    dc.b    TILE_RAFTR1, TILE_RAFTR2, TILE_RAFTR3

;****************************************************************************
; RunRaftCommon
; Executes the game logic of a raft, for all directions.
;----------------------------------------------------------------------------
; input a0.l ... Pointer to object
; input a1.l ... Tile list
; input d0.b ... X speed
; input d1.b ... Y speed
;----------------------------------------------------------------------------
; breaks: all but a0
;****************************************************************************

RunRaftCommon:
    tst.b   OBJ_DATA(a0)                ; Is the raft stuck?
    beq.s   @IsMoving
    bmi.s   @StillStuck
    move.w  (Anim), d7
    and.w   #$0F, d7
    move.b  d7, OBJ_DATA(a0)
    beq.s   @IsMoving
@StillStuck:
    rts
@IsMoving:
    
    move.b  OBJ_X(a0), d2               ; Get current raft position
    move.b  OBJ_Y(a0), d3
    
    moveq   #6-1, d4                    ; Clear tiles where we used to be
@ClearTiles:
    move.b  d2, d7
    move.b  d3, d6
    add.b   (a1)+, d7
    add.b   (a1)+, d6
    moveq   #TILE_WA, d5
    bsr     SetTile
    dbf     d4, @ClearTiles
    
    add.b   d0, d2                      ; Make raft advance
    add.b   d1, d3
    move.b  d2, OBJ_X(a0)
    move.b  d3, OBJ_Y(a0)
    
    move.b  d2, d7                      ; Carrying around the player?
    move.b  d3, d6
    moveq   #$10, d5
    moveq   #$10, d4
    bsr     CollidesPlayer
    tst.w   d7
    beq.s   @NotCarrying
    add.b   d0, (PlayerX)
    add.b   d1, (PlayerY)
@NotCarrying:
    
    lea     -12(a1), a1                 ; Draw tiles in the new position
    lea     12(a1), a2
    moveq   #6-1, d4
@DrawTiles:
    move.b  d2, d7
    move.b  d3, d6
    add.b   (a1)+, d7
    add.b   (a1)+, d6
    move.b  (a2)+, d5
    bsr     SetTile
    dbf     d4, @DrawTiles
    
    move.w  #$2010+VramRaftV, d5        ; Horizontal or vertical raft? Pick
    cmp.b   #OBJTYPE_RAFTL, OBJ_TYPE(a0)  ; the correct graphic
    blo.s   @VerticalGfx
    move.w  #$2010+VramRaftH, d5
@VerticalGfx:
    
    moveq   #0, d7                      ; Add it to the list of rafts to draw
    move.b  (NumRafts), d7
    move.w  d7, d6
    addq.b  #1, d7
    move.b  d7, (NumRafts)
    lea     (RaftList), a6
    add.w   d6, d6
    add.w   d6, d6
    lea     (a6,d6.w), a6
    move.b  OBJ_X(a0), (a6)+
    move.b  OBJ_Y(a0), (a6)+
    move.w  d5, (a6)+
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawAllRafts
; Draws all the rafts.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawAllRafts:
    lea     (RaftList), a0              ; Pointer to list of rafts
    moveq   #0, d0                      ; Number of rafts to draw
    move.b  (NumRafts), d0
    bra.s   @LoopEnd                    ; Scan every raft
    
@Loop:
    move.b  (a0)+, d1                   ; Get raft X
    move.b  (a0)+, d2                   ; Get raft Y
    move.w  (a0)+, d3                   ; Get raft tile ID
    
    cmp.b   (PlayerX), d1               ; Left or right side of the globe?
    bpl.s   @OnRight
    
@OnLeft:
    cmp.b   (PlayerY), d2               ; Top left or bottom left?
    bpl.s   @OnBottomLeft
    
@OnTopLeft:
    bsr     @DrawBottomRight            ; Sort raft sprites for the top
    bsr     @DrawBottomLeft               ; left quadrant of the globe
    bsr     @DrawTopRight
    bsr     @DrawTopLeft
    bra.s   @LoopEnd
    
@OnBottomLeft:
    bsr     @DrawTopRight               ; Sort raft sprites for the bottom
    bsr     @DrawTopLeft                  ; left quadrant of the globe
    bsr     @DrawBottomRight
    bsr     @DrawBottomLeft
    bra.s   @LoopEnd
    
@OnRight:
    cmp.b   (PlayerY), d2               ; Top right or bottom right?
    bpl.s   @OnBottomRight
    
@OnTopRight:
    bsr     @DrawBottomLeft             ; Sort raft sprites for the top
    bsr     @DrawBottomRight              ; right quadrant of the globe
    bsr     @DrawTopLeft
    bsr     @DrawTopRight
    bra.s   @LoopEnd
    
@OnBottomRight:
    bsr     @DrawTopLeft                ; Sort raft sprites for the bottom
    bsr     @DrawTopRight                 ; right quadrant of the globe
    bsr     @DrawBottomLeft
    bsr     @DrawBottomRight
    
@LoopEnd:
    dbf     d0, @Loop                   ; Draw next raft
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@DrawTopLeft:
    move.b  d1, d7                      ; Draw top left part
    move.b  d2, d6
    subq.b  #8, d7
    subq.b  #8, d6
    move.w  d3, d5
    bra     @AddRaftSprite

@DrawTopRight:
    move.b  d1, d7                      ; Draw top right part
    move.b  d2, d6
    addq.b  #8, d7
    subq.b  #8, d6
    move.w  d3, d5
    bra     @AddRaftSprite
    
@DrawBottomLeft:
    move.b  d1, d7                      ; Draw bottom left part
    move.b  d2, d6
    subq.b  #8, d7
    addq.b  #8, d6
    move.w  d3, d5
    bra     @AddRaftSprite
    
@DrawBottomRight:
    move.b  d1, d7                      ; Draw bottom right part
    move.b  d2, d6
    addq.b  #8, d7
    addq.b  #8, d6
    move.w  d3, d5
    bra     @AddRaftSprite

;----------------------------------------------------------------------------

@AddRaftSprite:
    sub.b   (PlayerX), d7               ; Account for camera
    sub.b   (PlayerY), d6
    
    cmp.b   #-$40, d7                   ; Do clipping
    ble.s   @Skip
    cmp.b   #$40, d7
    bge.s   @Skip
    cmp.b   #-$40, d6
    ble.s   @Skip
    cmp.b   #$40, d6
    bge.s   @Skip
    
    swap    d0                          ; Check if this portion of the raft
    clr.w   d0                            ; is too close to the left or right
    cmp.b   #-$38, d7                     ; sides and pick one of the border
    bge.s   @NoLeftSide                   ; graphics if so (like we do for
    subq.w  #6, d0                        ; the globe graphics)
    subq.w  #4, d5
@NoLeftSide:
    cmp.b   #$38, d7
    blt.s   @NoRightSide
    addq.w  #6, d0
    addq.w  #4, d5
@NoRightSide:
    
    swap    d1                          ; Do the same as above but for the
    clr.w   d1                            ; top and bottom sides
    cmp.b   #-$38, d6
    bge.s   @NoTopSide
    subq.w  #6, d1
    sub.w   #3*4, d5
@NoTopSide:
    cmp.b   #$38, d6
    blt.s   @NoBottomSide
    addq.w  #6, d1
    add.w   #3*4, d5
@NoBottomSide:
    
    lea     (RaftTable), a5             ; Use same table for both X and Y
    move.l  a5, a6
    
    bsr     Draw3DSpriteBackend         ; Draw this portion of the raft
    
    swap    d0                          ; Restore these
    swap    d1
    
@Skip:
    rts                                 ; Skip this portion of the raft
