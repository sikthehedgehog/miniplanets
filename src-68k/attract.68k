;****************************************************************************
; StartAttract
; Plays the next demo in attract mode.
;----------------------------------------------------------------------------
; notes: doesn't return
;****************************************************************************

StartAttract:
    move.b  (AttractSeq), d0            ; Get ID of replay to play
    
    moveq   #0, d7                      ; Get pointer to the data for the
    move.b  d0, d7                        ; replay to play this time
    add.w   d7, d7
    add.w   d7, d7
    lea     (AttractList), a0
    move.l  (a0,d7.w), a0
    
    addq.b  #1, d0                      ; Advance replay ID to use for the
    cmp.b   #NUM_ATTRACT, d0              ; next time
    blo.s   @AttractSeqOk
    moveq   #0, d0
@AttractSeqOk:
    move.b  d0, (AttractSeq)
    
    move.b  (a0)+, (Stage)              ; Get stage number to play
    move.l  a0, (AttractPtr)            ; Store pointer to beginning of
                                          ; input data
    st.b    (AttractMode)               ; Enable attract mode
    move.b  #1, (AttractTimer)          ; Make it update immediately
    
    bra     StartGame                   ; Start playing

;****************************************************************************
; UpdateAttract
; Processes faked inputs in attract mode (does nothing outside it).
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateAttract:
    tst.b   (AttractMode)               ; In attract mode?
    beq.s   @NoAttract                    ; If not, override nothing
    
    moveq   #0, d0                      ; No button presses faked yet
    subq.b  #1, (AttractTimer)          ; Read new input or keep using the
    bne.s   @NoRead                       ; cached data?
    
    move.l  (AttractPtr), a6            ; Pointer to data to read
    move.b  (a6)+, (AttractTimer)       ; Read how long this lasts
    move.b  (a6)+, d0                   ; Read new input
    move.l  a6, (AttractPtr)            ; Store updated pointer
    
    moveq   #$0F, d7                    ; Cache D-pad input (since it has to
    and.b   d0, d7                        ; be held down until the next
    move.b  d7, (AttractInput)            ; input from the replay)
    
@NoRead:
    move.b  (Joy1Press), d1             ; Replace any button presses from
    and.b   #$80, d1                      ; the joypad with our own (except
    or.b    d0, d1                        ; Start, which is kept together
    move.b  d1, (Joy1Press)               ; with the replayed one)
    
    or.b    (AttractInput), d1          ; Do the same for held down buttons
    move.b  d1, (Joy1Hold)
    
@NoAttract:
    rts                                 ; End of subroutine
