MAX_3DSPRITES:          equ 32          ; Maximum 3D sprites allowed

;****************************************************************************
; SPR3D_*
; Definition for the data stored for a 3D sprite.
;****************************************************************************

                        rsreset
SPR3D_X:                rs.b 1          ; X coordinate
SPR3D_Y:                rs.b 1          ; Y coordinate
SPR3D_TILE:             rs.w 1          ; Tile ID
                        if SORT_BY_DEPTH
SPR3D_DEPTH:            rs.w 1          ; Depth for sorting
                        endc

SPR3D_SIZE:             rs.b 0          ; Size of one entry

;****************************************************************************
; TOLOAD_*
; Flags indicating which graphics to stream. Used for graphics which are
; expensive to stream (e.g. because of decompression).
;****************************************************************************

                        rsreset
TOLOAD_WATER:           rs.b 1          ; Water graphics
TOLOAD_FIRE:            rs.b 1          ; Fire graphics
TOLOAD_BELT:            rs.b 1          ; Belt graphics

;****************************************************************************
; InitGlobe
; Initializes the level data.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

InitGlobe:
    clr.b   (AnimToLoad)                ; Reset animations to stream
    clr.b   (KeysLeft)                  ; No keys so far...
    
    moveq   #0, d7                      ; Get address of stage data
    move.b  (Stage), d7
    lsl.w   #3, d7
    lea     (StageList), a6
    lea     (a6,d7.w), a0
    
    lea     (GlobeMap), a6              ; Load map data
    move.l  (a0), a1
    moveq   #$100/$10-1, d7
@LoadMap:
    move.l  (a1)+, (a6)+
    move.l  (a1)+, (a6)+
    move.l  (a1)+, (a6)+
    move.l  (a1)+, (a6)+
    dbf     d7, @LoadMap
    
@LoadObjects:                           ; Load all objects in the map
    move.b  (a1)+, d7
    bmi.s   @ObjectsEnd
    move.b  (a1)+, d6
    move.b  (a1)+, d5
    move.b  (a1)+, d4
    bsr     AddObject
    bra.s   @LoadObjects
@ObjectsEnd:
    
    move.b  (StageName), d7             ; Stage 4 looks like autumn
    and.b   #$F0, d7
    cmp.b   #$40, d7
    bne.s   @NoAutumn
    move.l  (PalAutumn+0*2), (PaletteBuf+$11*2)
    move.w  (PalAutumn+2*2), (PaletteBuf+$13*2)
@NoAutumn:
    
    moveq   #0, d0                      ; Go through every tile in the globe
    lea     (GlobeMap), a0                ; to see what needs to be animated
    move.w  #$100-1, d7
@ScanGlobe:
    move.b  (a0)+, d1                   ; Get tile
    
    cmp.b   #TILE_WA, d1                ; Do we need to load water graphics?
    bne.s   @NoLoadWater                  ; Warning: mutually exclusive with
    bset    #TOLOAD_WATER, d0             ; fire due to taking up the same
@NoLoadWater:                             ; VRAM space
    
    cmp.b   #TILE_FI, d1                ; Do we need to load fire graphics?
    bne.s   @NoLoadFire                   ; Warning: mutually exclusive with
    bset    #TOLOAD_FIRE, d0              ; water due to taking up the same
@NoLoadFire:                              ; VRAM space
    
    cmp.b   #TILE_CU, d1                ; Do we need to load belt graphics?
    blo.s   @NoLoadBelts
    cmp.b   #TILE_CR, d1
    blo.s   @NoLoadBelts
    bset    #TOLOAD_BELT, d0
@NoLoadBelts:
    
    dbf     d7, @ScanGlobe              ; Check next tile
    move.b  d0, (AnimToLoad)            ; Store loading flags
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawGlobe
; Draws the globe (which eats up 64 sprites...).
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawGlobe:
    cmp.b   #3, (EndingPhase)           ; Going kaboom?
    beq     DrawEndingGlobe
    
    lea     (GlobeTable), a0            ; Look-up tables
    lea     (GlobeMap), a3              ; Tilemap data
    lea     (GlobeTiles), a4            ; Mappings table
    
    moveq   #0, d7                      ; Calculate entry to use
    move.b  (PlayerX), d7
    move.b  (PlayerY), d6
    and.b   #$0F, d7
    lsl.b   #4, d6
    or.b    d6, d7
    lsl.w   #6, d7
    lea     (a0,d7.w), a0
    lea     $4000(a0), a1
    lea     $4000(a1), a2
    lea     $4000(a2), a5
    
    moveq   #0, d5                      ; Calculate tile-level offset
    move.b  (PlayerY), d5                 ; (i.e. not pixel-level)
    lsl.w   #4, d5
    move.b  (PlayerX), d5
    lsr.b   #4, d5
    
    moveq   #%0101, d3                  ; All sprites are 2x2
    moveq   #$40-1, d4                  ; Go through all sprites
@Loop:
    move.b  (a0)+, d0                   ; Retrieve coordinates
    move.b  (a1)+, d1
    ext.w   d0
    ext.w   d1
    add.w   #160-8, d0
    add.w   #112-8, d1
    
    moveq   #0, d7                      ; Get sprite for this tile
    move.b  (a2)+, d7
    lsl.w   #4, d7
    lsr.b   #4, d7
    add.w   d5, d7
    and.w   #$0F0F, d7
    lsl.b   #4, d7
    lsr.w   #4, d7
    move.b  (a3,d7.w), d7
    add.w   d7, d7
    moveq   #0, d2
    move.b  (a5)+, d2
    add.w   (a4,d7.w), d2
    
    jsr     (AddSpriteNoClip).w         ; Draw this sprite
    dbf     d4, @Loop                   ; Go for next sprite
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawEndingGlobe
; Draws the exploding globe in the ending.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawEndingGlobe:
    lea     (EndingGlobeTable), a0      ; Look-up tables
    
    moveq   #0, d4                      ; Get current part of the animation
    move.b  (EndingTimer), d4
    cmp.w   #$40, d4
    blo.s   @NotGoneYet
    rts
@NotGoneYet:
    
    move.w  d4, d7                      ; Determine entry to use
    lsl.w   #6, d7
    lea     (a0,d7.w), a0
    lea     $1000(a0), a1
    lea     $1000(a1), a2
    
    moveq   #%0101, d3                  ; All sprites are 2x2
    moveq   #$40-1, d4                  ; Go through all sprites
@Loop:
    move.b  (a0)+, d0                   ; Retrieve coordinates
    move.b  (a1)+, d1
    ext.w   d0
    ext.w   d1
    add.w   #160-8, d0
    add.w   #112-8, d1
    
    moveq   #0, d2                      ; Get graphic for this tile
    move.b  (a2)+, d2
    btst.l  #2, d2
    bne.s   *+6
    or.w    #$2000, d2
    add.w   #VramEndingGlobe, d2
    
    jsr     (AddSpriteNoClip).w         ; Draw this sprite
    dbf     d4, @Loop                   ; Go for next sprite
    
    rts                                 ; End of subroutine

;****************************************************************************
; AnimGlobe
; Updates the tile animations.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

AnimGlobe:
    btst    #TOLOAD_WATER, (AnimToLoad) ; Does this map have water?
    beq.s   @NoWater
    
    moveq   #0, d7                      ; Update water graphics
    move.w  (Anim), d7
    and.w   #$03<<3, d7
    lsl.w   #7-3, d7
    move.w  d7, d6
    lsl.w   #3, d7
    add.w   d6, d7
    
    add.l   #GfxWater, d7
    move.w  #$20*9*(2*2), d6
    move.l  (DMABufEnd), a6
    DMA2VRAM_SL d7, VramWater*$20, d6, a6
    move.l  a6, (DMABufEnd)
@NoWater:

;----------------------------------------------------------------------------

    btst    #TOLOAD_FIRE, (AnimToLoad)  ; Does this map have fire?
    beq.s   @NoFire
    
    moveq   #0, d7                      ; Update fire graphics
    move.w  (Anim), d7
    and.w   #$03<<2, d7
    lsl.w   #7-2, d7
    move.w  d7, d6
    lsl.w   #3, d7
    add.w   d6, d7
    
    add.l   #GfxFire, d7
    move.w  #$20*9*(2*2), d6
    move.l  (DMABufEnd), a6
    DMA2VRAM_SL d7, VramFire*$20, d6, a6
    move.l  a6, (DMABufEnd)
@NoFire:

;----------------------------------------------------------------------------

    tst.b   (KeysLeft)                  ; Animate goal when all keys were
    bne.s   @NoGoalAnim                   ; retrieved
    move.w  (Anim), d7
    lsr.w   #2, d7
    and.w   #$03<<1, d7
    lea     (PalGoal), a6
    move.l  (a6,d7.w), (PaletteBuf+$21*2)
    move.l  4(a6,d7.w), (PaletteBuf+$23*2)
@NoGoalAnim:

;----------------------------------------------------------------------------

    btst    #TOLOAD_BELT, (AnimToLoad)  ; Does this map have belts?
    beq.s   @NoBelts
    tst.b   (BeltOK)                    ; Are the belts powered on?
    beq.s   @NoBelts
    
    btst.b  #0, (Anim+1)                ; Alternate between loading vertical
    beq.s   @NoVerBelt                    ; and horizontal belts every frame
    bsr     UpdateVerticalBelts           ; because we ran out of bandwidth
    bra.s   @NoHorBelt                    ; for DMA
@NoVerBelt:
    bsr     UpdateHorizontalBelts
@NoHorBelt:
@NoBelts:
    
    rts                                 ; End of subroutine

;****************************************************************************
; UpdateVerticalBelts
; Updates the graphics for vertical conveyor belts. Note that it queues a
; DMA transfer to be executed later.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateVerticalBelts:
    lea     (BeltBuf_V), a0             ; Pointer to graphics
    move.l  (DMABufEnd), a6             ; Current DMA queue tail
    
    move.w  (Anim), d7                  ; Determine what frame to use
    neg.w   d7                            ; for the upward belts
    and.l   #$03<<1, d7
    lsl.w   #6, d7
    move.w  d7, d6
    lsl.w   #3, d7
    add.w   d6, d7
    
    add.l   a0, d7                      ; Queue up the DMA transfer
    DMA2VRAM_S d7, VramBeltU*$20, 9*4*$20, a6
    
    move.w  (Anim), d7                  ; Determine what frame to use
    and.l   #$03<<1, d7                   ; for the downward belts
    lsl.w   #6, d7
    move.w  d7, d6
    lsl.w   #3, d7
    add.w   d6, d7
    
    add.l   a0, d7                      ; Queue up the DMA transfer
    DMA2VRAM_S d7, VramBeltD*$20, 9*4*$20, a6
    
    move.l  a6, (DMABufEnd)             ; Store updated DMA queue tail
    rts                                 ; End of subroutine

;****************************************************************************
; UpdateHorizontalBelts
; Updates the graphics for horizontal conveyor belts. Note that it queues a
; DMA transfer to be executed later.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdateHorizontalBelts:
    lea     (BeltBuf_H), a0             ; Pointer to graphics
    move.l  (DMABufEnd), a6             ; Current DMA queue tail
    
    move.w  (Anim), d7                  ; Determine what frame to use
    neg.w   d7                            ; for the belts going left
    and.l   #$03<<1, d7
    lsl.w   #6, d7
    move.w  d7, d6
    lsl.w   #3, d7
    add.w   d6, d7
    
    add.l   a0, d7                      ; Queue up the DMA transfer
    DMA2VRAM_S d7, VramBeltL*$20, 9*4*$20, a6
    
    move.w  (Anim), d7                  ; Determine what frame to use
    and.l   #$03<<1, d7                   ; for the belts going right
    lsl.w   #6, d7
    move.w  d7, d6
    lsl.w   #3, d7
    add.w   d6, d7
    
    add.l   a0, d7                      ; Queue up the DMA transfer
    DMA2VRAM_S d7, VramBeltR*$20, 9*4*$20, a6
    
    move.l  a6, (DMABufEnd)             ; Store updated DMA queue tail
    rts                                 ; End of subroutine

;****************************************************************************
; GetTile
; Gets the tile from the globe at the specified coordinates.
;----------------------------------------------------------------------------
; input d7.b .... X coordinate
; input d6.b .... Y coordinate
;----------------------------------------------------------------------------
; output d7.b ... Tile type
; output d6.b ... Collision type
;----------------------------------------------------------------------------
; breaks: a6
;****************************************************************************

GetTile:
    lsr.b   #4, d7                      ; Get tile at this position
    and.b   #$F0, d6
    or.b    d6, d7
    and.w   #$FF, d7
    lea     (GlobeMap), a6
    move.b  (a6,d7.w), d7
    
    lea     (CollTiles), a6             ; Get its collision type
    move.b  (a6,d7.w), d6
    
    rts                                 ; End of subroutine

;****************************************************************************
; SetTile
; Changes the tile from the globe at the specified coordinates.
;----------------------------------------------------------------------------
; input d7.b .... X coordinate
; input d6.b .... Y coordinate
; input d5.b .... New tile value
;----------------------------------------------------------------------------
; breaks: d5-d7, a6
;****************************************************************************

SetTile:
    lsr.b   #4, d7                      ; Get location of tile
    and.b   #$F0, d6
    or.b    d6, d7
    and.w   #$FF, d7
    lea     (GlobeMap), a6
    
    move.b  d5, (a6,d7.w)               ; Store new tile
    rts                                 ; End of subroutine

;****************************************************************************
; Add3DSprite
; Adds a sprite object to the 3D world.
;----------------------------------------------------------------------------
; input d7.b ... X coordinate (in globe space)
; input d6.b ... Y coordinate (in globe space)
; input d5.w ... Sprite tile ID
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

Add3DSprite:
    sub.b   (PlayerX), d7               ; Account for camera
    sub.b   (PlayerY), d6
    
    cmp.b   #-$40, d7                   ; Check for sprites that should be
    ble.s   @Behind                       ; drawn behind the globe
    cmp.b   #$40, d7
    bge.s   @Behind
    cmp.b   #-$40, d6
    ble.s   @Behind
    cmp.b   #$40, d6
    bge.s   @Behind
    
    swap    d5                          ; We're out of usable registers so
                                          ; let's borrow the upper half of
                                          ; d5 for a bit
    
    move.w  (FrontSpriteOffset), d5     ; Get pointer to the next free slot
    lea     (FrontSpriteList), a5         ; in the front sprites list and
    lea     (a5,d5.w), a6                 ; reserve it
    addq.w  #SPR3D_SIZE, d5
    move.w  d5, (FrontSpriteOffset)
    
    if      SORT_BY_DEPTH
    bra.s   @DoSort                     ; Figure out where in the list the
                                          ; sprite should go going by its
                                          ; depth
    else
    swap    d5                          ; Get tile ID back
    
    move.b  d7, (a6)+                   ; Store X coordinate
    move.b  d6, (a6)+                   ; Store Y coordinate
    move.w  d5, (a6)+                   ; Store tile ID
    
    rts                                 ; End of subroutine
    endc

;----------------------------------------------------------------------------

@Behind:
    cmp.b   #-$58, d7                   ; Check for sprites that are too far
    ble.s   @Skip                         ; back and wouldn't be visible
    cmp.b   #$58, d7                      ; anyway so we can skip them
    bge.s   @Skip
    cmp.b   #-$58, d6
    ble.s   @Skip
    cmp.b   #$58, d6
    bge.s   @Skip
    
    swap    d5                          ; We're out of usable registers so
                                          ; let's borrow the upper half of
                                          ; d5 for a bit
    
    move.w  (BackSpriteOffset), d5      ; Get pointer to the next free slot
    lea     (BackSpriteList), a5          ; in the back sprites list and
    lea     (a5,d5.w), a6                 ; reserve it
    addq.w  #SPR3D_SIZE, d5
    move.w  d5, (BackSpriteOffset)
    
    if      SORT_BY_DEPTH
    bra.s   @DoSort
    else
    swap    d5                          ; Get tile ID back
    
    move.b  d7, (a6)+                   ; Store X coordinate
    move.b  d6, (a6)+                   ; Store Y coordinate
    move.w  d5, (a6)+                   ; Store tile ID
    endc
    
@Skip:
    rts

;----------------------------------------------------------------------------

    if SORT_BY_DEPTH

@DoSort:
    ext.w   d7                          ; Compute sprite depth for sorting
    move.w  d7, d5                        ; purposes
    bpl.s   @XIsOk
    neg.w   d5
@XIsOk:
    ext.w   d6
    move.w  d5, a4
    move.w  d6, d5
    bpl.s   @YIsOk
    neg.w   d5
@YIsOk:
    add.w   a4, d5
    
@SortLoop:
    cmp.l   a5, a6                      ; No more sprites to compare against?
    beq.s   @SortEnd
    cmp.w   -SPR3D_SIZE+SPR3D_DEPTH(a6), d5 ; Is this sprite deeper?
    bhs.s   @SortEnd
    move.l  -(a6), SPR3D_SIZE(a6)       ; Move it forwards if deeper
    move.w  -(a6), SPR3D_SIZE(a6)
    bra.s   @SortLoop                   ; Try next sprite
    
@SortEnd:
    move.b  d7, (a6)+                   ; Store X coordinate
    move.b  d6, (a6)+                   ; Store Y coordinate
    move.l  d5, (a6)+                   ; Store tile ID and depth
    
    rts                                 ; End of subroutine
    endc

;****************************************************************************
; DrawAllFrontSprites
; Draws all the 3D sprites in front of the globe.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawAllFrontSprites:
    lea     (FrontSpriteList), a0       ; List of sprites to draw
    lea     (ObjectTable), a1           ; Projection table
    
    moveq   #0, d0                      ; No offset needed
    moveq   #0, d1
    
    move.w  (FrontSpriteOffset), d7     ; Get how many sprites to draw and
    lea     (a0,d7.w), a2                 ; go loop through them (if any)
    bra.s   @LoopEnd
    
@Loop:
    move.b  (a0)+, d7                   ; Get X coordinate
    move.b  (a0)+, d6                   ; Get Y coordinate
    move.w  (a0)+, d5                   ; Get tile ID
    if      SORT_BY_DEPTH
    addq.l  #2, a0                      ; Skip depth
    endc
    
    move.l  a1, a5                      ; Use same table for both X and Y
    move.l  a1, a6
    bsr     Draw3DSpriteBackend         ; Draw the sprite
    
@LoopEnd:
    cmp.l   a2, a0                      ; Go for next sprite, if any
    bne.s   @Loop
    rts                                 ; End of subroutine

;****************************************************************************
; DrawAllBackSprites
; Draws all the 3D sprites behind the globe.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawAllBackSprites:
    lea     (BackSpriteList), a0        ; List of sprites to draw
    lea     (ObjectTable), a1           ; Projection table in front of globe
    ;lea     (ObjectTable2), a2          ; Projection table behind globe
    
    moveq   #0, d0                      ; No offset needed
    moveq   #0, d1
    
    move.w  (BackSpriteOffset), d7      ; Get how many sprites to draw and
    lea     (a0,d7.w), a3                 ; go loop through them (if any)
    bra.s   @LoopEnd
    
@Loop:
    move.b  (a0)+, d7                   ; Get X coordinate
    move.b  (a0)+, d6                   ; Get Y coordinate
    move.w  (a0)+, d5                   ; Get tile ID
    if      SORT_BY_DEPTH
    addq.l  #2, a0                      ; Skip depth
    endc
    
    move.l  a1, a5
    move.l  a1, a6
    bsr     Draw3DSpriteBackend         ; Draw the sprite
    
@LoopEnd:
    cmp.l   a3, a0                      ; Go for next sprite, if any
    bne.s   @Loop
    rts                                 ; End of subroutine

;****************************************************************************
; Draw3DSpriteBackend
; The subroutine that does the job for DrawAllFrontSprites,
; DrawAllBackSprites and DrawAllRafts.
;----------------------------------------------------------------------------
; input d0.w ... X offset (in screen space)
; input d1.w ... Y offset (in screen space)
; input d7.b ... X coordinate (in camera space)
; input d6.b ... Y coordinate (in camera space)
; input d5.w ... Sprite tile ID
; input a5.l ... Pointer to X look-up table
; input a6.l ... Pointer to Y look-up table
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

Draw3DSpriteBackend:
    if      1
    add.b   #$80, d7
    add.b   #$80, d6
    else
    add.b   #$40, d7                    ; Normalize X and Y coordinates into
    bpl.s   @FrontX                       ; the range used to index into the
    not.b   d7                            ; look-up table
@FrontX:
    add.b   #$40, d6
    bpl.s   @FrontY
    not.b   d6
@FrontY:
    endif
    
    and.l   #$FFFF, d7
    lsl.w   #8, d7                      ; Convert positions to 3D
    move.b  d6, d7
    
    ;add.b   d7, d7                      ; (x position)
    ;lsr.w   #1, d7
    lea     (a5,d7.l), a5
    
    ;add.w   d7, d7                      ; (y position)
    ;lsr.b   #1, d7
    rol.w   #8, d7
    ;add.b   d7, d7
    ;lsr.w   #1, d7
    lea     (a6,d7.l), a6
    
    move.b  (a6), d7                    ; (fetch values)
    move.b  (a5), d6
    ext.w   d7
    ext.w   d6
    add.w   #160-8, d7
    add.w   #112-8, d6
    
    movem.l d0-d3, -(sp)                ; Finally draw the sprite
    add.w   d7, d0
    add.w   d6, d1
    move.w  d5, d2
    moveq   #%0101, d3
    jsr     (AddSpriteNoClip).w
    movem.l (sp)+, d0-d3
    
    rts                                 ; End of subroutine
