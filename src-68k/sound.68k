;****************************************************************************
; InitSound
; Initializes the sound engine.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

InitSound:
    lea     (InstrumentList), a0        ; Boot up sound engine
    bsr     Echo_Init
    
    clr.b   (BGMToPlay)                 ; Playing nothing yet
    clr.b   (SFXToPlay)
    clr.b   (CurrentBGM)
    clr.b   (CurrentSFX)
    
    rts                                 ; End of subroutine

;****************************************************************************
; UpdateSound
; Updates sound output.
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

UpdateSound:
    movem.l d0-d1/a0, -(sp)             ; Save registers (blame Echo's API)
    
    moveq   #0, d7                      ; Check if a BGM should play
    move.b  (BGMToPlay), d7
    beq.s   @NoBGM
    bmi.s   @StopBGM
    
    clr.b   (BGMToPlay)
    subq.w  #1, d7                      ; Play the BGM then
    add.w   d7, d7
    add.w   d7, d7
    lea     @BGMList(pc), a6
    move.l  (a6,d7.w), a0
    bsr     Echo_PlayBGM
    bra.s   @Done
    
@StopBGM:
    clr.b   (BGMToPlay)                 ; Stop BGM instead?
    bsr     Echo_StopBGM
    bra.s   @Done
    
@NoBGM:
    
    moveq   #0, d7                      ; Check if a SFX should play
    move.b  (SFXToPlay), d7
    beq.s   @NoSFX
    clr.b   (SFXToPlay)
    move.b  d7, (CurrentSFX)
    
    subq.w  #1, d7                      ; Play the SFX then
    add.w   d7, d7
    add.w   d7, d7
    lea     @SFXList(pc), a6
    move.l  (a6,d7.w), a0
    bsr     Echo_PlaySFX
    bra.s   @Done
@NoSFX:
    
    bsr     Echo_GetStatus              ; Check if a SFX is playing yet
    btst.l  #0, d0
    bne.s   @SFXPlaying
    clr.b   (CurrentSFX)
@SFXPlaying:
    
@Done:
    movem.l (sp)+, d0-d1/a0             ; Restore registers
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@BGMList:
    dc.l    BGMData_Stage1              ; BGM_STAGE1
    dc.l    BGMData_Stage2              ; BGM_STAGE2
    dc.l    BGMData_Stage3              ; BGM_STAGE3
    dc.l    BGMData_Stage4              ; BGM_STAGE4
    dc.l    BGMData_Stage5              ; BGM_STAGE5
    dc.l    BGMData_Boss                ; BGM_BOSS
    dc.l    BGMData_Title               ; BGM_TITLE
    dc.l    BGMData_Ending              ; BGM_ENDING
    dc.l    BGMData_Tally               ; BGM_TALLY
    dc.l    BGMData_GameOver            ; BGM_GAMEOVER

@SFXList:
    dc.l    SFXData_Jump                ; SFX_JUMP
    dc.l    SFXData_Impact              ; SFX_IMPACT
    dc.l    SFXData_Spring              ; SFX_SPRING
    dc.l    SFXData_Key                 ; SFX_KEY
    dc.l    SFXData_Crystal             ; SFX_CRYSTAL
    dc.l    SFXData_Ouch                ; SFX_OUCH
    dc.l    SFXData_Explosion           ; SFX_EXPLOSION
    dc.l    SFXData_1up                 ; SFX_1UP
    dc.l    SFXData_Goal                ; SFX_GOAL

;****************************************************************************
; PlayBGM
; Plays background music.
;----------------------------------------------------------------------------
; input d7.b ... BGM ID
;****************************************************************************

PlayBGM:
    cmp.b   (CurrentBGM), d7            ; Playing this BGM already?
    bne.s   @NotTheSame
    rts
@NotTheSame:
    
    move.b  d7, (BGMToPlay)             ; Schedule BGM to play
    move.b  d7, (CurrentBGM)
    rts                                 ; End of subroutine

;****************************************************************************
; StopBGM
; Stops background music.
;----------------------------------------------------------------------------
; input d7.b ... BGM ID
;****************************************************************************

StopBGM:
    move.b  #-1, (BGMToPlay)
    move.b  #0, (CurrentBGM)
    rts

;****************************************************************************
; PlaySFX
; Plays a sound effect.
;----------------------------------------------------------------------------
; input d7.b ... SFX ID
;****************************************************************************

PlaySFX:
    cmp.b   (CurrentSFX), d7            ; Make sure no higher priority SFX
    blo.s   @Overriden                    ; is already playing
    
    move.b  d7, (CurrentSFX)            ; Schedule SFX to play
    move.b  d7, (SFXToPlay)
    
@Overriden:
    rts                                 ; End of subroutine
