;****************************************************************************
; PasswordEntry
; Main loop for the password entry screen.
;----------------------------------------------------------------------------
; notes: doesn't return
;****************************************************************************

PasswordEntry:
    jsr     (ResetVideo).w              ; Reset graphics
    st.b    (FadeInFlag)                ; We want fade in
    
    jsr     (InitUniverse).w            ; Draw background
    jsr     (LoadFont).w                ; Load generic font
    
    lea     (GfxLED), a6                ; Load LED display graphics
    lea     (LocalRAM), a5
    jsr     (DecompressSLZ).w
    DMA2VRAM LocalRAM, VramLEDEmpty*$20, GfxLEDSize*$20, ($C00004)
    
    lea     (PalMenu), a6               ; Load palette
    lea     (PaletteBuf), a5
    moveq   #$40/8, d7
@LoadPalette:
    move.l  (a6)+, (a5)+
    move.l  (a6)+, (a5)+
    move.l  (a6)+, (a5)+
    move.l  (a6)+, (a5)+
    dbf     d7, @LoadPalette
    
    clr.w   (PasswordTimer)             ; No "invalid password" yet
    move.l  #-1, (EnteredPassword)      ; Reset password input
    clr.b   (PasswordDial)              ; Digit 0 is selected by default
    clr.l   (PasswordDialAnim)          ; Reset dial animation
    clr.l   (PasswordDialAnim+4)
    clr.w   (PasswordDialAnim+8)
    clr.b   (PasswordDelay)             ; No input delay yet!
    clr.b   (PasswordQuit)              ; Obviously not quitting yet either

;----------------------------------------------------------------------------

@MainLoop:
    SetVRAMAddr $F802, ($C00004)        ; Make background move
    move.w  (Anim), d7
    lsr.w   #4, d7
    move.w  d7, ($C00000)
    
@LogicLoop:
    bsr     UpdatePasswordDial          ; Update everything
    bsr     UpdatePasswordText
    addq.w  #1, (Anim)
    
    clr.b   (Joy1Press)                 ; Do NTSC/PAL speed correction
    clr.b   (Joy2Press)
    subq.b  #1, (NumFrames)
    bne.s   @LogicLoop
    
    move.b  (PasswordQuit), d0          ; Time to quit?
    bne.s   @Quit
    
    jsr     (ClearSprites).w            ; Draw everything
    bsr     DrawPasswordLED
    bsr     DrawPasswordDial
    bsr     DrawPasswordText
    
    jsr     (NextFrame).w               ; Wait for next frame
    bra     @MainLoop

;----------------------------------------------------------------------------

@Quit:
    jsr     (FadeOut).w                 ; Go away
    
    tst.b   (PasswordQuit)
    bpl     StartGame
    bra     TitleScreen

;****************************************************************************
; UpdatePasswordText
; Updates the animation of the password caption.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdatePasswordText:
    tst.w   (PasswordTimer)             ; Reduce the timer if it isn't 0
    sne.b   d7                            ; Yeah, that's pretty much it
    ext.w   d7
    add.w   d7, (PasswordTimer)
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawPasswordText
; Changes the text in the password caption.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawPasswordText:
    move.l  #PasswordTextBuf, (TextBufAddr) ; Reset buffer
    jsr     (ClearText).w
    
    move.w  (PasswordTimer), d7         ; No warning?
    bne.s   @Invalid
    moveq   #3, d7
    lea     (StrPasswordEntry), a6
    jsr     (DrawText).w
    move.w  #$4000, d7
    jsr     (ColorizeText).w
    bra.s   @Done
@Invalid:
    
    and.w   #$10, d7                    ; Blink text?
    beq.s   @Done
    
    moveq   #2, d7                      ; Write warning
    lea     (StrInvalidPassword), a6
    jsr     (DrawText).w
    move.w  #$6000, d7
    jsr     (ColorizeText).w
    
@Done:
    move.w  #$C184, d7
    jsr     (UploadText).w
    rts                                 ; End of subroutine

;****************************************************************************
; UpdatePasswordDial
; Updates the password dial (selecting, animation, etc.)
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

UpdatePasswordDial:
    move.b  (PasswordDial), d0          ; Selected dial digit
    
    tst.b   (PasswordDelay)             ; Still delaying?
    beq.s   @NoDelay
    subq.b  #1, (PasswordDelay)
    bra     @HasDelay
@NoDelay:
    
    move.b  (Joy1Hold), d1              ; Get joypad input
    
    btst.l  #3, d1                      ; Next digit?
    beq.s   @NoRight
    move.b  #6, (PasswordDelay)
    addq.b  #1, d0
    cmp.b   #9, d0
    ble.s   @NoRight
    clr.b   d0
@NoRight:
    
    btst.l  #2, d1                      ; Previous digit?
    beq.s   @NoLeft
    move.b  #6, (PasswordDelay)
    subq.b  #1, d0
    bge.s   @NoLeft
    move.b  #9, d0
@NoLeft:
    
    move.b  d0, (PasswordDial)          ; Store new selected digit
@HasDelay:
    
    move.b  (Joy1Press), d1             ; Now get joypad presses
    move.l  (EnteredPassword), d2       ; Currently entered password
    
    btst.l  #7, d1                      ; Accept entered password?
    bne.s   @Accept
    
    btst.l  #4, d1                      ; Erase a digit?
    beq.s   @NoErase
    cmp.b   #$FF, d2
    beq.s   @Cancel
    lsr.l   #8, d2
    or.l    #$FF000000, d2
@NoErase:
    
    and.b   #$60, d1                    ; Type a digit?
    beq.s   @NoType
    cmp.l   #$FF000000, d2
    blo.s   @NoType
    lsl.l   #8, d2
    or.b    d0, d2
@NoType:
    
    move.l  d2, (EnteredPassword)       ; Store new entered password
    
    lea     (PasswordDialAnim), a0      ; Animate the dial so the selected
    moveq   #10-1, d7                     ; digit "jumps" above the level of
@AnimDial:                                ; the rest of the digits
    tst.b   d0
    seq.b   d2
    and.b   #$20, d2
    move.b  (a0), d1
    add.b   d2, d1
    lsr.b   #1, d1
    move.b  d1, (a0)+
    subq.b  #1, d0
    dbf     d7, @AnimDial
    
    rts                                 ; End of subroutine

;----------------------------------------------------------------------------

@Cancel:
    move.b  #-1, (PasswordQuit)
    rts

;----------------------------------------------------------------------------

@Accept:
    move.l  d2, d7                      ; Pack the digits together
    swap    d7
    lsl.b   #4, d7
    lsr.w   #4, d7
    swap    d7
    lsl.b   #4, d7
    lsl.w   #4, d7
    lsr.l   #8, d7
    
    lea     (PasswordList), a0          ; Scan all passwords to see if it's
@CheckLoop:                               ; a valid one
    move.w  (a0)+, d6
    cmp.w   #-1, d6
    beq.s   @Nope
    cmp.w   d6, d7
    beq.s   @Found
    addq.w  #2, a0
    bra.s   @CheckLoop
    
@Nope:                                  ; Not a valid password? :|
    moveq   #SFX_OUCH, d7
    jsr     (PlaySFX).w
    move.w  #$5F, (PasswordTimer)
    rts
    
@Found:                                 ; Valid password :o
    move.b  (a0)+, (Muteki)
    move.b  (a0)+, (Stage)
    move.b  #1, (PasswordQuit)
    rts

;****************************************************************************
; DrawPasswordLED
; Draws the password LED display.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawPasswordLED:
    move.l  (EnteredPassword), d4       ; Get currently entered password
    
    move.w  #160-$50+4, d0              ; Draw all digits in the buffer
    moveq   #%1110, d3
    moveq   #4-1, d5
@Loop:
    rol.l   #8, d4                      ; Fetch next digit
    
    move.b  d4, d2                      ; Determine its base tile
    ext.w   d2
    muls.w  #4*6, d2
    add.w   #$4000+VramLEDDigit, d2
    
    moveq   #112-$18, d1                ; Draw top half
    jsr     (AddSprite).w
    add.w   #4*3, d2                    ; Draw bottom half
    moveq   #112, d1
    jsr     (AddSprite).w
    
    add.w   #$28, d0                    ; Go for next digit
    dbf     d5, @Loop
    
    move.w  #160, d0                    ; Draw gaps between cells
    move.w  #112, d1
    moveq   #0, d2
    lea     (SprLEDGaps), a6
    jsr     (AddMetasprite).w
    
    rts                                 ; End of subroutine

;****************************************************************************
; DrawPasswordDial
; Draws the password entry dial
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawPasswordDial:
    move.w  #160-98, d0                 ; Initial X coordinate
    move.w  #$C000+VramText, d2         ; Base tile ID for sprites
    moveq   #%0110, d3                  ; All sprites are 2x3
    
    move.b  (PasswordDial), d5          ; Which digit is selected?
    lea     (PasswordDialAnim), a0      ; To know the position of each digit
                                          ; in the dial as they animate
    
    moveq   #10-1, d4                   ; Go through all digits
@Loop:
    moveq   #0, d1                      ; Determine vertical position of
    move.b  (a0)+, d1                     ; digit (used for dial animation)
    addq.w  #2, d1
    lsr.w   #2, d1
    neg.w   d1
    add.w   #176, d1
    
    bclr.l  #13, d2                     ; Make the selected digit look yellow
    tst.b   d5
    bne.s   @NotSelected
    bset.l  #13, d2
@NotSelected:
    
    jsr     (AddSprite).w               ; Draw digit
    add.w   #20, d0                     ; Go for next digit
    addq.w  #6, d2
    subq.b  #1, d5
    dbf     d4, @Loop
    
    rts                                 ; End of subroutine
